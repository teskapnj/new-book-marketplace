/**
 * Import function triggers from their respecticonst {onCall, HttpsError} = require("firebase-functions/v2/https");
const {onDocumentUpdated} = require("firebase-functions/v2/firestore");
const {getAuth} = require("firebase-admin/auth");
const {getFirestore} = require("firebase-admin/firestore");
const {initializeApp} = require("firebase-admin/app");

// Firebase Admin SDK'yı başlat
initializeApp();

const db = getFirestore();
const auth = getAuth();

// Manuel olarak kullanıcı authentication durumunu değiştirme
exports.toggleUserAuthStatus = onCall(async (request) => {
  const {uid, disabled} = request.data;
  
  // Admin kontrolü
  const callerUid = request.auth?.uid;
  if (!callerUid) {
    throw new HttpsError('unauthenticated', 'User must be authenticated');
  }
  
  try {
    // Çağıran kullanıcının admin olup olmadığını kontrol et
    const callerDoc = await db.collection('users').doc(callerUid).get();
    if (!callerDoc.exists || callerDoc.data().role !== 'admin') {
      throw new HttpsError('permission-denied', 'Only admins can perform this action');
    }
    
    // Authentication durumunu güncelle
    await auth.updateUser(uid, {
      disabled: disabled
    });
    
    // Log işlemi
    await db.collection('admin_logs').add({
      action: disabled ? 'suspend_user' : 'activate_user',
      targetUserId: uid,
      adminId: callerUid,
      timestamp: new Date(),
      details: `User ${uid} was ${disabled ? 'suspended' : 'activated'}`
    });
    
    return {
      success: true,
      message: `User ${disabled ? 'suspended' : 'activated'} successfully`
    };
    
  } catch (error) {
    console.error('Error updating user auth status:', error);
    throw new HttpsError('internal', 'Failed to update user status');
  }
});

// Kullanıcıyı tamamen silme
exports.deleteUserAuth = onCall(async (request) => {
  const {uid} = request.data;
  
  // Admin kontrolü
  const callerUid = request.auth?.uid;
  if (!callerUid) {
    throw new HttpsError('unauthenticated', 'User must be authenticated');
  }
  
  try {
    // Çağıran kullanıcının admin olup olmadığını kontrol et
    const callerDoc = await db.collection('users').doc(callerUid).get();
    if (!callerDoc.exists || callerDoc.data().role !== 'admin') {
      throw new HttpsError('permission-denied', 'Only admins can perform this action');
    }
    
    // Firebase Authentication'dan kullanıcıyı sil
    await auth.deleteUser(uid);
    
    // Firestore'dan da kullanıcıyı sil (veya status'u deleted yap)
    await db.collection('users').doc(uid).update({
      status: 'deleted',
      deletedAt: new Date(),
      deletedBy: callerUid
    });
    
    // Log işlemi
    await db.collection('admin_logs').add({
      action: 'delete_user',
      targetUserId: uid,
      adminId: callerUid,
      timestamp: new Date(),
      details: `User ${uid} was permanently deleted`
    });
    
    return {
      success: true,
      message: 'User deleted successfully'
    };
    
  } catch (error) {
    console.error('Error deleting user:', error);
    throw new HttpsError('internal', 'Failed to delete user');
  }
});*
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */

const {setGlobalOptions} = require("firebase-functions");
const {onRequest} = require("firebase-functions/https");
const logger = require("firebase-functions/logger");

// For cost control, you can set the maximum number of containers that can be
// running at the same time. This helps mitigate the impact of unexpected
// traffic spikes by instead downgrading performance. This limit is a
// per-function limit. You can override the limit for each function using the
// `maxInstances` option in the function's options, e.g.
// `onRequest({ maxInstances: 5 }, (req, res) => { ... })`.
// NOTE: setGlobalOptions does not apply to functions using the v1 API. V1
// functions should each use functions.runWith({ maxInstances: 10 }) instead.
// In the v1 API, each function can only serve one request per container, so
// this will be the maximum concurrent request count.
setGlobalOptions({ maxInstances: 10 });

// Create and deploy your first functions
// https://firebase.google.com/docs/functions/get-started

// exports.helloWorld = onRequest((request, response) => {
//   logger.info("Hello logs!", {structuredData: true});
//   response.send("Hello from Firebase!");
// });
exit
^exit

